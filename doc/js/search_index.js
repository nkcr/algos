var search_data = {"index":{"searchIndex":["frequency","monoalpha","object","polyalpha","best_lev_distance()","bs1()","bs2()","frequency()","friedman()","key_crypt()","key_length()","kullback()","lev_distance()","mini_max()","pgdc()","primer_numbers()","random_poly()","rest()","shift()","t()","x()","y()","readme"],"longSearchIndex":["frequency","monoalpha","object","polyalpha","object#best_lev_distance()","object#bs1()","object#bs2()","frequency#frequency()","frequency#friedman()","monoalpha#key_crypt()","object#key_length()","frequency#kullback()","object#lev_distance()","object#mini_max()","object#pgdc()","object#primer_numbers()","polyalpha#random_poly()","object#rest()","monoalpha#shift()","object#t()","object#x()","object#y()",""],"info":[["Frequency","","Frequency.html","","<p>Purpose :\n<p>calculate a letter frequency\n\n"],["MonoAlpha","","MonoAlpha.html","","<p>Purpose\n<p>monoalphabetic substitutions\n"],["Object","","Object.html","",""],["PolyAlpha","","PolyAlpha.html","","<p>Purpose\n<p>polyalphabetic substitutions\n"],["best_lev_distance","Object","Object.html#method-i-best_lev_distance","(word1, word2)",""],["bs1","Object","Object.html#method-i-bs1","(array, find)","<p>that one loops forever if not found\n"],["bs2","Object","Object.html#method-i-bs2","(array, find)","<p>that one is the correct one\n"],["frequency","Frequency","Frequency.html#method-i-frequency","(string,char)","<p>Calculates the relativ frequency of a letter in a sentence it is done by\ndividing the number of occurence …\n"],["friedman","Frequency","Frequency.html#method-i-friedman","(string1,string2)","<p>calculates k Friedman coef of 2 sentences of same length if the second\nstring is longer it&#39;s okay, …\n"],["key_crypt","MonoAlpha","MonoAlpha.html#method-i-key_crypt","(key,string)","<p>substitute based on a repeated key in this method I create a 2x2 matrix\nwith alphabet shifted params …\n"],["key_length","Object","Object.html#method-i-key_length","(max,string)","<p>Outputs statistics about the given string by calcultating kullback coef we\nshould be able to find the …\n"],["kullback","Frequency","Frequency.html#method-i-kullback","(string)","<p>calculates Kullback coef of a given string it is done by making friedman of\neach sentence shifted, divided …\n"],["lev_distance","Object","Object.html#method-i-lev_distance","(word1, word2)",""],["mini_max","Object","Object.html#method-i-mini_max","()","<p>Purpose :\n<p>solving game descision problems like minimax and alpha/beta\n\n<p>Concept :\n"],["pgdc","Object","Object.html#method-i-pgdc","(a,b)","<p>Finds the PGDC of &#39;a&#39; &amp; &#39;b&#39; Using the Euclid Algorithme\nparams\n<p>a (Double) first number …\n"],["primer_numbers","Object","Object.html#method-i-primer_numbers","(n)","<p>Finds n first prime number with the Crible d&#39;Eratosthène params\n<p>n (Integer) the first n prime number …\n\n"],["random_poly","PolyAlpha","PolyAlpha.html#method-i-random_poly","(string)","<p>Random polyalpha substitution params :\n<p>string (String) string to cypher\n\n<p>return :\n"],["rest","Object","Object.html#method-i-rest","(a,b)","<p>Finds the rest of &#39;a&#39; after division by &#39;b&#39; params\n<p>a (Double) the number\n<p>b (Double) the …\n"],["shift","MonoAlpha","MonoAlpha.html#method-i-shift","(shift, input_string)","<p>Shift the given string params :\n<p>shift (Integer) shift value\n<p>input_string (String) the string to be crypted …\n"],["t","Object","Object.html#method-i-t","(n)",""],["x","Object","Object.html#method-i-x","(n)",""],["y","Object","Object.html#method-i-y","(n)",""],["README","","README_md.html","","<p>algos\n<p>Levenshtein\n<p>Compute distance between two words\n"]]}}